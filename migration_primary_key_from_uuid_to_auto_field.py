# Generated by Django 2.2.2 on 2019-06-20 13:56

from django.db import migrations, models


def fill_mymodel_uuid(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    User = apps.get_model('users', 'user')
    Lead = apps.get_model('crm', 'lead')
    Referral = apps.get_model('users', 'referral')
    Contact = apps.get_model('crm', 'contact')
    BankAccount = apps.get_model('users', 'bankaccount')
    Earning = apps.get_model('earnings', 'earning')
    Incentive = apps.get_model('earnings', 'incentive')
    Appointment = apps.get_model('content', 'appointment')
    counter = 1
    for obj in User.objects.using(db_alias).all():
        obj.user_id = counter
        obj.save()
        for model_class in [
            Lead, Referral, Contact, BankAccount, Earning, Incentive,
                Appointment]:
            data = []
            filename = 'media/%s_migrations.csv' % str(model_class._meta)
            for instance in model_class.objects.using(db_alias).filter(
                    user_id=obj.id):
                data.append(dict(
                    id=obj.id, new_id=counter, lead_id=instance.id))
            if data:
                create_csv(data, filename)
        counter += 1


def create_csv(data, file_name=None):
    """
    Use create_csv method instead of this.
    Accepts list of dictionaries and save them as csvfile
    Created for upload type dashboards
    """
    import csv
    filepath = file_name
    keys = sorted(data[0].keys())
    with open(filepath, 'w') as csvfile:
        dict_writer = csv.DictWriter(csvfile, keys)
        dict_writer.writeheader()
        dict_writer.writerows(data)
    return filepath


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0021_auto_20190622_1856'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='user_id',
            field=models.IntegerField(null=True),
        ),
        migrations.RunPython(fill_mymodel_uuid, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='user',
            name='user_id',
            field=models.IntegerField(default=0),
        ),
        migrations.RemoveField('user', 'id'),
        migrations.RenameField(
            model_name='user',
            old_name='user_id',
            new_name='id'
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
    ]
